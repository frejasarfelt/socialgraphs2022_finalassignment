there are many important problems in computer sciences and other areas for which optimal solutions can be found but the time to do so is so long that it is  not practical  examples of such problems are optimal assignment of tasks to processors  finding an optimal tour for the local postman  optimal packing of a suitcase  optimizing the payload for a space mission or selecting a profitable stock portfolio    in the course we will first specify what we mean by a  computationally hard   problem  then some examples of such that problems are presented and methods are described to identify a problem as being hard  in order to become accessible to an analysis real world problems have to be converted into abstract mathematical models which capture the essence of the original problem   we shall then look at problems where randomization helps in solving them  this means that there are fast algorithms for solving the problem that use  coin flips    i e  a random number generator  hence repeatedly running such an algorithm on the same input might lead to different solutions  we shall consider problems where a  good   solution will be found with high probability by randomized algorithms lectures and exercises  some of which are mandatory lecture notes will be available on campusnet for many real world problems  an optimal solution cannot be found efficiently  such problems are called computationally hard  for such problems only approximate solutions can be found in reasonable time  the aim is to enable the students to identify a problem as being not efficiently solvable and to supply them with algorithmic schemes for finding approximate solutions 