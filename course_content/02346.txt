computer systems  multi core systems  distributed systems  cache and   memory hierarchy effects  performance measurements   programming paradigms  paradigms for distributed systems including message   passing  shared memory   thread and process synchronization  asynchronous and synchronous   message passing  inter process communication  mutual exclusion  race   conditions   programming patterns  fork join  master slave  client server paradigm   programming systems mpi  openmp group activities  exercises and programming laboratories  it is desirable  that participants in the course learn the english technical terms and can communicate on the course s topic in english  therefore parts of the course may be  taught in english the course provides a broad introduction to distributed and parallel programming with a focus on practically applicable knowledge  within the course  industry standards for parallel programming such openmp are introduced   fundamental and practical theory is studied  students will also be able to measure performance of distributed and parallel systems   one goal of the course is that students will be able to solve simple parallel programming tasks such as making a program race free and take a small part of a sequential program and turn it parallel using a industry standard parallel programming system   finally  distributed system consisting of a set of cooperating processes or machines will be studied  the goal is that students will be able to implement small distributed systems by using and understanding common coordination and communication methods 